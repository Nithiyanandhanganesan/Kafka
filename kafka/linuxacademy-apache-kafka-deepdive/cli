


Commands:
============

Topics:
---------
bin/kafka-topics.sh

Creating a topic :
   -> bin/kafka-topics.sh --zookeeper localhost:2181 --topic test1 --create --partitions 3 --replication-factor 3

List all topics
   -> bin/kafka-topics.sh --zookeeper localhost:2181 --list

Describing a topic
   -> bin/kafka-topics.sh --zookeeper localhost:2181 --topic test2 --describe

Delete a topic
   -> bin/kafka-topics.sh --zookeeper localhost:2181 --topic test2 --delete

Detail for the producer command
   -> bin/kafka-console-producer.sh

Detail for the consumer command
   -> bin/kafka-console-consumer.sh

Detail for the consumer groups command
   -> bin/kafka-consumer-groups.sh

Create a new topic with a configuration override.
     kafka-topics --bootstrap-server localhost:9092 --create --topic configured-topic --partitions 1 --replication-factor 1 --config max.message.bytes=64000
List the configurations for the topic to see the configuration override.
     kafka-configs --zookeeper localhost:2181 --entity-type topics --entity-name configured-topic --describe
Modify the configuration override for the existing topic.
     kafka-configs --zookeeper localhost:2181 --entity-type topics --entity-name configured-topic --alter --add-config max.message.bytes=65000
List the topic configurations again to see the changes.
     kafka-configs --zookeeper localhost:2181 --entity-type topics --entity-name configured-topic --describe
Modify a broker-wide default topic configuration.
     kafka-configs --bootstrap-server localhost:9092 --entity-type brokers --entity-name 1 --alter --add-config message.max.bytes=66000
View the broker configuration to see the changes to the default.
     kafka-configs --bootstrap-server localhost:9092 --entity-type brokers --entity-name 1 --describe

Producer:
---------
Publish message to the topic:
   -> bin/kafka-console-producer.sh --broker-list kafka1:9092 --topic test

Add the acks=all flag to your producer
  -> bin/kafka-console-producer.sh --broker-list kafka1:9092 --topic test --producer-property acks=all

Create a topic with the console producer (not recommended) [it creates the topic and then publish]
  -> bin/kafka-console-producer.sh --broker-list kafka1:9092 --topic test4

List the newly created topic
  -> bin/kafka-topics.sh --zookeeper zookeeper1:2181/kafka --list

View the partitions for a topic
   -> bin/kafka-topics.sh --zookeeper zookeeper1:2181/kafka --topic test5 --describe

List the newly created topic
   -> bin/kafka-topics.sh --zookeeper zookeeper1:2181/kafka --list

View the partitions for a topic
   -> bin/kafka-topics.sh --zookeeper zookeeper1:2181/kafka --topic test5 --describe

Consumer:
----------
Start a console consumer to a topic
   -> bin/kafka-console-consumer.sh --bootstrap-server kafka3:9092 --topic test

Consuming messages from the beginning
   -> bin/kafka-console-consumer.sh --bootstrap-server kafka3:9092 --topic test --from-beginning

Consumer Group:
---------------

Kafka was meant to read multiple messages at once using consumer groups.
The consumers work very intelligently, in that they never read the same messages, and keep track of where they left off using the offset.

We can consume the message from the same topic from multiple consumer having same group id. If message read by one consumer, other will not
read the same. This is to ensure messages are read fast.


Start a consumer group for a topic
  -> bin/kafka-console-consumer.sh --bootstrap-server kafka3:9092 --topic test --group application1

Start producing new messages to a topic
  -> bin/kafka-console-producer.sh --broker-list kafka1:9092 --topic test

Start a consumer group and read messages from the beginning
  -> bin/kafka-console-consumer.sh --bootstrap-server kafka3:9092 --topic test --group application1 --from-beginning

List the consumer groups
  -> bin/kafka-consumer-groups.sh --bootstrap-server kafka3:9092 --list

Describe a consumer group
  -> bin/kafka-consumer-groups.sh --bootstrap-server kafka3:9092 --describe --group application1
